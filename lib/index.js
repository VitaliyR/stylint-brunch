// Generated by CoffeeScript 1.9.3
var StylusLinter, chalk, command, fs, path, pluralize, spawn;

fs = require('fs');

path = require('path');

chalk = require('chalk');

pluralize = require('pluralize');

spawn = require('child_process').spawn;

command = require.resolve('stylint').replace(/index\.js$/, 'bin/stylint');

module.exports = StylusLinter = (function() {
  StylusLinter.prototype.brunchPlugin = true;

  StylusLinter.prototype.type = 'stylesheet';

  StylusLinter.prototype.extension = 'styl';

  function StylusLinter(config) {
    var cfg, ref, ref1, ref2;
    this.config = config;
    cfg = (ref = (ref1 = this.config) != null ? (ref2 = ref1.plugins) != null ? ref2.stylint : void 0 : void 0) != null ? ref : {};
    this.options = cfg.options != null ? cfg.options : void 0;
  }

  StylusLinter.prototype.lint = function(data, path, callback) {
    var args, stylint, warnings;
    args = [path];
    stylint = spawn(command, args);
    stylint.stdout.setEncoding('utf8');
    stylint.stderr.setEncoding('utf8');
    warnings = [];
    stylint.stdout.on('data', function(output) {
      output = output.toString();
      output = output.split("\n").slice(1).join("\n");
      output = output.substring(0, output.lastIndexOf("\n"));
      output = output.substring(0, output.lastIndexOf("\n"));
      output = output.substring(0, output.lastIndexOf("\n"));
      if (output.indexOf("Warning:") > -1) {
        return warnings.push(output);
      }
    });
    return stylint.on('close', function(code) {
      warnings.forEach(function(warning) {
        return console.warn("" + (chalk.yellow(warning)));
      });
      return callback();
    });
  };

  return StylusLinter;

})();
